#!/bin/bash
set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
source "$SCRIPT_DIR/logs"
source "$SCRIPT_DIR/utils"
source "$SCRIPT_DIR/checker"

# Create a global temp directory for logs and other shared resources
INSTALL_TEMP_DIR=$(create_temp_dir "dotfiles_install")
LOG_FILE="$INSTALL_TEMP_DIR/install_packages-$(date +%F).log"
exec > >(tee -a "$LOG_FILE") 2>&1

# Cleanup function to ensure temp directory is removed on exit
cleanup() {
    local exit_code=$?

    # Keep log file only if there was an error
    if [ $exit_code -eq 0 ]; then
        log "Installation completed successfully, cleaning up temporary files"
    else
        # Copy log to home directory for troubleshooting if there was an error
        local backup_log="$HOME/dotfiles_install_error-$(date +%F-%H%M%S).log"
        cp "$LOG_FILE" "$backup_log"
        log_warning "Installation encountered an error, log saved to $backup_log"
    fi

    # Clean up the temp directory
    cleanup_temp_dir "$INSTALL_TEMP_DIR"

    exit $exit_code
}

# Register cleanup function to run on script exit
trap cleanup EXIT

# Help option
if [[ "$1" == "--help" ]]; then
    section_header "Package Installation Help"
    echo "Usage: install_packages [--help]"
    echo "This script installs various tools and utilities commonly used in development environments."
    echo
    echo "Tools that will be installed:"
    echo " - starship   - Cross-shell prompt"
    echo " - tmux       - Terminal multiplexer"
    echo " - zoxide     - Smarter cd command"
    echo " - fzf        - Fuzzy finder"
    echo " - ripgrep    - Fast grep alternative"
    echo " - fd         - Simple, fast file finder"
    echo " - lazygit    - Git terminal UI"
    echo " - direnv     - Environment switcher"
    echo " - eza        - Modern ls alternative"
    echo " - nvim       - Neovim text editor"
    echo " - node       - JavaScript runtime"
    echo " - carapace   - Command line completions"
    echo " - bat        - Syntax highlighting pager"
    echo " - yazi       - File manager"
    exit 0
fi

section_header "Development Tools Installation"

log_progress "Checking system prerequisites"
check_architecture
check_sudo

check_dependency "curl"
check_dependency "tar"
check_dependency "git"

# Define versions.
STARSHIP_VERSION="1.23.0"
TMUX_VERSION="3.5"
ZOXIDE_VERSION="0.9.8"
FZF_VERSION="0.62.0"
RG_VERSION="14.1.0"
FD_VERSION="10.2.0"
LAZYGIT_VERSION="0.45.2"
NVIM_VERSION="0.11.1"
DIRENV_VERSION="2.35.0"
EZA_VERSION="0.20.21"
NODE_VERSION="22.14.0"
CARAPACE_VERSION="1.3.0"
BAT_VERSION="0.25.0"
YAZI_VERSION="25.5.31"

log "Using the following versions:"
echo " - starship:  v${STARSHIP_VERSION}"
echo " - tmux:      v${TMUX_VERSION}"
echo " - zoxide:    v${ZOXIDE_VERSION}"
echo " - fzf:       v${FZF_VERSION}"
echo " - ripgrep:   v${RG_VERSION}"
echo " - fd:        v${FD_VERSION}"
echo " - lazygit:   v${LAZYGIT_VERSION}"
echo " - nvim:      v${NVIM_VERSION}"
echo " - direnv:    v${DIRENV_VERSION}"
echo " - eza:       v${EZA_VERSION}"
echo " - node:      v${NODE_VERSION}"
echo " - carapace:  v${CARAPACE_VERSION}"
echo " - bat:       v${BAT_VERSION}"
echo " - yazi:      v${YAZI_VERSION}"

# Set platforms based on architecture.
# Standardized on GNU libc for consistency and compatibility
GNU_SUFFIX="unknown-linux-gnu"
MUSL_SUFFIX="unknown-linux-musl"

if [ "$ARCH" = "aarch64" ]; then
  # ARM64-specific platforms
  LAZYGIT_PLATFORM="Linux_arm64"
  DIRENV_PLATFORM="linux-arm64"
  NODE_PLATFORM="linux-arm64"
  FZF_PLATFORM="arm64"
  CARAPACE_PLATFORM="linux_arm64"
  NVIM_PLATFORM="arm64"
  log "Detected ARM64 architecture"
else
  # x86_64-specific platforms
  LAZYGIT_PLATFORM="Linux_x86_64"
  DIRENV_PLATFORM="linux-amd64"
  NODE_PLATFORM="linux-x64"
  FZF_PLATFORM="amd64"
  CARAPACE_PLATFORM="linux_amd64"
  NVIM_PLATFORM="x86_64"
  log "Detected x86_64 architecture"
fi

# Installations
section_header "Installing Tools"

# All installation commands are now defined to use proper temporary directories
# Each command represents a use case that will be executed in its own temp directory

log_progress "Installing starship prompt..."
install_command "starship" "curl -k -L \"https://github.com/starship/starship/releases/download/v${STARSHIP_VERSION}/starship-${ARCH}-${MUSL_SUFFIX}.tar.gz\" -o starship.tar.gz && \
  tar -xzf starship.tar.gz && \
  $SUDO install starship -D -t /usr/local/bin/" "starship"

# log_progress "Installing tmux terminal multiplexer..."
# install_command "tmux" "curl -k -LO \"https://github.com/Alexyz205/package_builder/releases/download/1.1.0/tmux_release_${TMUX_VERSION}_${ARCH}.tar.gz\" && $SUDO tar -xzf tmux_release_${TMUX_VERSION}_${ARCH}.tar.gz --strip-components=1 -C /usr/local && $SUDO ln -s /usr/local/lib/libevent_core-2.1.so.7 /lib/libevent_core-2.1.so.7" "tmux"

log_progress "Installing zoxide directory navigator..."
install_command "zoxide" "curl -k -L \"https://github.com/ajeetdsouza/zoxide/releases/download/v${ZOXIDE_VERSION}/zoxide-${ZOXIDE_VERSION}-${ARCH}-${MUSL_SUFFIX}.tar.gz\" -o zoxide.tar.gz && \
  tar -xzf zoxide.tar.gz && \
  $SUDO cp zoxide /usr/local/bin/ && \
  $SUDO chmod +x /usr/local/bin/zoxide" "zoxide"

log_progress "Installing fzf fuzzy finder..."
install_command "fzf" "curl -k -LO \"https://github.com/junegunn/fzf/releases/download/v${FZF_VERSION}/fzf-${FZF_VERSION}-linux_${FZF_PLATFORM}.tar.gz\" && \
  tar -xzf fzf-${FZF_VERSION}-linux_${FZF_PLATFORM}.tar.gz && \
  $SUDO install fzf -D -t /usr/local/bin/" "fzf"

log_progress "Installing ripgrep search tool..."
install_command "ripgrep" "curl -k -LO \"https://github.com/BurntSushi/ripgrep/releases/download/${RG_VERSION}/ripgrep-${RG_VERSION}-${ARCH}-${GNU_SUFFIX}.tar.gz\" && \
  tar -xzf ripgrep-${RG_VERSION}-${ARCH}-${GNU_SUFFIX}.tar.gz && \
  $SUDO install ripgrep-${RG_VERSION}-${ARCH}-${GNU_SUFFIX}/rg -D -t /usr/local/bin/" "rg"

log_progress "Installing fd file finder..."
install_command "fd" "curl -k -LO \"https://github.com/sharkdp/fd/releases/download/v${FD_VERSION}/fd-v${FD_VERSION}-${ARCH}-${GNU_SUFFIX}.tar.gz\" && \
  tar -xzf fd-v${FD_VERSION}-${ARCH}-${GNU_SUFFIX}.tar.gz && \
  $SUDO install fd-v${FD_VERSION}-${ARCH}-${GNU_SUFFIX}/fd -D -t /usr/local/bin/" "fd"

log_progress "Installing lazygit Git UI..."
install_command "lazygit" "curl -k -LO \"https://github.com/jesseduffield/lazygit/releases/download/v${LAZYGIT_VERSION}/lazygit_${LAZYGIT_VERSION}_${LAZYGIT_PLATFORM}.tar.gz\" && \
  tar -xzf lazygit_${LAZYGIT_VERSION}_${LAZYGIT_PLATFORM}.tar.gz && \
  $SUDO install lazygit -D -t /usr/local/bin/" "lazygit"

log_progress "Installing direnv environment manager..."
install_command "direnv" "curl -k -LO \"https://github.com/direnv/direnv/releases/download/v${DIRENV_VERSION}/direnv.${DIRENV_PLATFORM}\" && \
  chmod +x direnv.${DIRENV_PLATFORM} && \
  $SUDO mv direnv.${DIRENV_PLATFORM} /usr/local/bin/direnv" "direnv"

log_progress "Installing eza ls replacement..."
install_command "eza" "curl -k -LO \"https://github.com/eza-community/eza/releases/download/v${EZA_VERSION}/eza_${ARCH}-${GNU_SUFFIX}.tar.gz\" && \
  tar -xzf eza_${ARCH}-${GNU_SUFFIX}.tar.gz && \
  $SUDO install eza -D -t /usr/local/bin/" "eza"

log_progress "Installing neovim editor..."
install_command "nvim" "curl -k -LO \"https://github.com/neovim/neovim/releases/download/v${NVIM_VERSION}/nvim-linux-${NVIM_PLATFORM}.tar.gz\" && \
  tar -xzf nvim-linux-${NVIM_PLATFORM}.tar.gz && \
  $SUDO cp -r nvim-linux-${NVIM_PLATFORM}/* /usr/local/" "nvim"

log_progress "Installing node.js runtime..."
install_command "node" "curl -k -LO \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-${NODE_PLATFORM}.tar.xz\" && \
  tar -xf node-v${NODE_VERSION}-${NODE_PLATFORM}.tar.xz && \
  $SUDO cp -r node-v${NODE_VERSION}-${NODE_PLATFORM}/* /usr/local/" "node"

log_progress "Installing carapace command completion..."
install_command "carapace" "curl -k -LO \"https://github.com/carapace-sh/carapace-bin/releases/download/v${CARAPACE_VERSION}/carapace-bin_${CARAPACE_VERSION}_${CARAPACE_PLATFORM}.tar.gz\" && \
  tar -xzf carapace-bin_${CARAPACE_VERSION}_${CARAPACE_PLATFORM}.tar.gz && \
  $SUDO install carapace -D -t /usr/local/bin/" "carapace"

log_progress "Installing bat syntax highlighting pager..."
install_command "bat" "curl -k -LO \"https://github.com/sharkdp/bat/releases/download/v${BAT_VERSION}/bat-v${BAT_VERSION}-${ARCH}-${GNU_SUFFIX}.tar.gz\" && \
  tar -xzf bat-v${BAT_VERSION}-${ARCH}-${GNU_SUFFIX}.tar.gz && \
  $SUDO install bat-v${BAT_VERSION}-${ARCH}-${GNU_SUFFIX}/bat -D -t /usr/local/bin/" "bat"

log_progress "Installing yazi file manager..."
install_command "yazi" "curl -k -LO \"https://github.com/sxyazi/yazi/releases/download/v${YAZI_VERSION}/yazi-${ARCH}-${MUSL_SUFFIX}.zip\" && \
  unzip yazi-${ARCH}-${MUSL_SUFFIX}.zip && \
  $SUDO install yazi-${ARCH}-${MUSL_SUFFIX}/yazi -D -t /usr/local/bin/" "yazi"

section_header "Installation Summary"
log_complete "All tools have been successfully installed!"
echo
echo "Tools installed:"
echo "  - starship  - Cross-shell prompt"
echo "  - tmux      - Terminal multiplexer"
echo "  - zoxide    - Smarter cd command"
echo "  - fzf       - Fuzzy finder"
echo "  - ripgrep   - Fast grep alternative"
echo "  - fd        - Simple, fast file finder"
echo "  - lazygit   - Git terminal UI"
echo "  - direnv    - Environment switcher"
echo "  - eza       - Modern ls alternative"
echo "  - nvim      - Neovim text editor"
echo "  - node      - JavaScript runtime"
echo "  - carapace  - Command line completions"
echo "  - bat       - Syntax highlighting pager"
echo "  - yazi      - File manager"
echo
echo "Run --help for more information about each tool."
