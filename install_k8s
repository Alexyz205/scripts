#!/bin/bash

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"

# Initialize error handling
if [ -f "$SCRIPT_DIR/error_handling" ]; then
    source "$SCRIPT_DIR/error_handling"
    init_error_handling "install_k8s"
else
    set -euo pipefail
fi

source "$SCRIPT_DIR/logs"
source "$SCRIPT_DIR/utils"
source "$SCRIPT_DIR/checker"

# Create a global temp directory for logs and other shared resources
INSTALL_TEMP_DIR=$(create_temp_dir "k8s_install")
LOG_FILE="$INSTALL_TEMP_DIR/install_k8s-$(date +%F).log"
exec > >(tee -a "$LOG_FILE") 2>&1

# Cleanup function to ensure temp directory is removed on exit
cleanup() {
    local exit_code=$?

    # Keep log file only if there was an error
    if [ $exit_code -eq 0 ]; then
        log "Installation completed successfully, cleaning up temporary files"
    else
        # Copy log to home directory for troubleshooting if there was an error
        local backup_log="$HOME/k8s_install_error-$(date +%F-%H%M%S).log"
        cp "$LOG_FILE" "$backup_log"
        log_warning "Installation encountered an error, log saved to $backup_log"
    fi

    # Clean up the temp directory
    cleanup_temp_dir "$INSTALL_TEMP_DIR"

    exit $exit_code
}

# Register cleanup function to run on script exit
trap cleanup EXIT

# Help option
if [[ "$1" == "--help" ]]; then
    section_header "Kubernetes Tools Installer"
    echo "Usage: install_k8s.sh [--help]"
    echo "This script installs kubectl, k9s, helm, helmfile, and configures the Catppuccin theme for k9s."
    echo
    echo "Components that will be installed:"
    echo " ${INFO_ICON} kubectl    - Kubernetes command-line tool"
    echo " ${INFO_ICON} k9s        - Terminal UI for Kubernetes"
    echo " ${INFO_ICON} helm       - Kubernetes package manager"
    echo " ${INFO_ICON} helmfile   - Declarative spec for deploying helm charts"
    echo " ${INFO_ICON} helm-diff  - Helm plugin for showing differences"
    exit 0
fi

section_header "Kubernetes Tools Installation"

# Check prerequisites
log_progress "Checking system prerequisites"
check_dependency curl
check_dependency tar
check_architecture
check_sudo

# Load versions from lock file
DOTFILES_ROOT="$(dirname "$SCRIPT_DIR")"
LOCK_FILE="$DOTFILES_ROOT/packages.lock.yml"

# Parse YAML function (simple key-value parser)
parse_yaml() {
    local prefix=$2
    local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
    sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
    awk -F$fs '{
        indent = length($1)/2;
        vname[indent] = $2;
        for (i in vname) {if (i > indent) {delete vname[i]}}
        if (length($3) > 0) {
            vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
            printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
        }
    }'
}

# Load versions from lock file - exit with error if file or versions are missing
if [[ ! -f "$LOCK_FILE" ]]; then
    log_error "Lock file not found: $LOCK_FILE"
    log_error "Please ensure packages.lock.yml exists in the dotfiles root directory"
    exit 1
fi

log_progress "Loading versions from lock file..."
eval $(parse_yaml "$LOCK_FILE" "LOCK_")

# Extract version numbers from lock file - exit with error if any are missing
KUBECTL_VERSION="${LOCK_packages_k8s_tools_kubectl}"
K9S_VERSION="${LOCK_packages_k8s_tools_k9s}"
HELM_VERSION="${LOCK_packages_k8s_tools_helm}"
HELMFILE_VERSION="${LOCK_packages_k8s_tools_helmfile}"

# Validate that all required versions are present
MISSING_PACKAGES=()
[[ -z "$KUBECTL_VERSION" ]] && MISSING_PACKAGES+=("kubectl")
[[ -z "$K9S_VERSION" ]] && MISSING_PACKAGES+=("k9s")
[[ -z "$HELM_VERSION" ]] && MISSING_PACKAGES+=("helm")
[[ -z "$HELMFILE_VERSION" ]] && MISSING_PACKAGES+=("helmfile")

if [[ ${#MISSING_PACKAGES[@]} -gt 0 ]]; then
    log_error "Missing versions in lock file for k8s packages: ${MISSING_PACKAGES[*]}"
    log_error "Please ensure all k8s package versions are defined in packages.lock.yml"
    exit 1
fi

log_complete "Versions loaded from lock file"

log "Using the following versions:"
echo -e " ${INFO_ICON} kubectl:   ${BOLD}v${KUBECTL_VERSION}${RESET}"
echo -e " ${INFO_ICON} k9s:       ${BOLD}v${K9S_VERSION}${RESET}"
echo -e " ${INFO_ICON} helm:      ${BOLD}v${HELM_VERSION}${RESET}"
echo -e " ${INFO_ICON} helmfile:  ${BOLD}v${HELMFILE_VERSION}${RESET}"

# Set platform based on architecture.
if [ "$ARCH" = "aarch64" ]; then
  PLATFORM="arm64"
  HELMFILE_PLATFORM="arm64"
  log "Detected ARM64 architecture"
else
  PLATFORM="amd64"
  HELMFILE_PLATFORM="386"
  log "Detected AMD64 architecture"
fi

# Installations
section_header "Installing Command-Line Tools"

log_progress "Installing kubectl..."
install_command "kubectl" "curl -LO \"https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/${PLATFORM}/kubectl\" && chmod +x kubectl && \$SUDO install -D kubectl /usr/local/bin/kubectl" "kubectl"

log_progress "Installing k9s..."
install_command "k9s" "curl -LO \"https://github.com/derailed/k9s/releases/download/v${K9S_VERSION}/k9s_Linux_${PLATFORM}.tar.gz\" && tar -xzf k9s_Linux_${PLATFORM}.tar.gz && \$SUDO install -D k9s /usr/local/bin/k9s" "k9s"

log_progress "Installing helm..."
install_command "helm" "curl -LO \"https://get.helm.sh/helm-v${HELM_VERSION}-linux-${PLATFORM}.tar.gz\" && tar -xzf helm-v${HELM_VERSION}-linux-${PLATFORM}.tar.gz && \$SUDO install -D linux-${PLATFORM}/helm /usr/local/bin/helm" "helm"

log_progress "Installing helmfile..."
install_command "helmfile" "curl -LO \"https://github.com/helmfile/helmfile/releases/download/v${HELMFILE_VERSION}/helmfile_${HELMFILE_VERSION}_linux_${HELMFILE_PLATFORM}.tar.gz\" && tar -xzf helmfile_${HELMFILE_VERSION}_linux_${HELMFILE_PLATFORM}.tar.gz && \$SUDO install -D helmfile /usr/local/bin/helmfile" "helmfile"

# Install Helm plugins
log_progress "Installing Helm plugins..."
install_command "helm-diff" "helm plugin install https://github.com/databus23/helm-diff" "helm diff" "" true
install_command "helm-secrets" "helm plugin install https://github.com/jkroepke/helm-secrets" "helm secrets" "" true

section_header "Configuring K9s Theme"

# Fetch and set the Catppuccin theme for k9s
THEME_URL="https://github.com/catppuccin/k9s/raw/main/dist/catppuccin-mocha-transparent.yaml"
THEME_DIR="$HOME/.config/k9s/skins"
THEME_FILE="$THEME_DIR/catppuccin-mocha-transparent.yaml"

log_progress "Fetching Catppuccin theme for k9s"
mkdir -p "$THEME_DIR"

# Use temporary directory for downloading theme
run_in_temp_dir "k9s_theme" "curl -L \"$THEME_URL\" -o theme.yaml && cp theme.yaml \"$THEME_FILE\"" || error_exit "Failed to fetch Catppuccin theme."
log_success "Downloaded theme to $THEME_FILE"

# Configure k9s to use the theme
CONFIG_FILE="$HOME/.config/k9s/config.yaml"
log_progress "Configuring k9s to use the Catppuccin theme"
mkdir -p "$(dirname "$CONFIG_FILE")"
if grep -q "ui:" "$CONFIG_FILE" 2>/dev/null; then
    sed -i '/ui:/a \ \ \ \ skin: catppuccin-mocha-transparent' "$CONFIG_FILE"
else
    echo -e "\nk9s:\n  ui:\n    skin: catppuccin-mocha-transparent" >> "$CONFIG_FILE"
fi

log_success "Catppuccin theme for k9s set successfully"

section_header "Installation Complete"
log_complete "All Kubernetes tools were installed successfully!"
echo
echo "${INFO_ICON} Commands available:"
echo -e "  ${BOLD}kubectl${RESET} - Kubernetes CLI"
echo -e "  ${BOLD}k9s${RESET}     - Kubernetes TUI with Catppuccin theme"
echo -e "  ${BOLD}helm${RESET}    - Package manager for Kubernetes"
echo -e "  ${BOLD}helmfile${RESET} - Declarative spec for deploying helm charts"
echo

exit 0
