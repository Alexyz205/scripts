#!/bin/bash

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
source "$SCRIPT_DIR/logs"
source "$SCRIPT_DIR/checker"

# Domain-level concept: Temp directory management with proper lifecycle
# ---------------------------------------------------------------------

# Create a unique temporary directory and return its path
# Usage: TEMP_DIR=$(create_temp_dir "package_name")
create_temp_dir() {
    local prefix="${1:-install}"
    local temp_dir

    # Create a unique timestamped temp directory inside system temp
    # Use stderr for logging to avoid capturing in command substitution
    temp_dir=$(mktemp -d "/tmp/${prefix}_$(date +%Y%m%d%H%M%S)_XXXXXX") || {
        log_error "Failed to create temporary directory for $prefix" >&2
        return 1
    }

    # Log to stderr instead of stdout to avoid capturing in the return value
    log_progress "Created temporary directory: $temp_dir" >&2

    # Only output the directory path to stdout
    echo "$temp_dir"
}

# Clean up a temporary directory
# Usage: cleanup_temp_dir "$TEMP_DIR"
cleanup_temp_dir() {
    local temp_dir="$1"

    if [ -d "$temp_dir" ]; then
        log_progress "Cleaning up temporary directory: $temp_dir"
        rm -rf "$temp_dir"
        if [ -d "$temp_dir" ]; then
            log_warning "Failed to remove temporary directory: $temp_dir"
        else
            log_progress "Successfully removed temporary directory"
        fi
    fi
}

# Execute a command in a temporary directory, with proper cleanup
# Usage: run_in_temp_dir "package_name" "command to execute"
run_in_temp_dir() {
    local prefix="$1"
    local command="$2"
    local current_dir
    local temp_dir
    local result=0

    current_dir=$(pwd)
    # Create temp directory and verify it exists
    temp_dir=$(create_temp_dir "$prefix") || return 1

    if [ ! -d "$temp_dir" ]; then
        log_error "Invalid temporary directory path: $temp_dir"
        return 1
    fi

    # Execute in temp directory with error handling
    log_progress "Running command in temporary directory: $temp_dir"
    cd "$temp_dir" || {
        log_error "Failed to change to temporary directory: $temp_dir"
        return 1
    }

    # Use eval to execute the command and capture its exit status
    eval "$command"
    result=$?

    # Return to original directory
    cd "$current_dir" || log_warning "Failed to return to original directory: $current_dir"

    # Clean up temp directory regardless of command success/failure
    cleanup_temp_dir "$temp_dir"

    # Return the original command's exit status
    return $result
}

check_dependency() {
    command -v "$1" &> /dev/null || { log_error "$1 is required but not installed."; exit 1; }
}

install_command() {
    local name=$1
    local install_cmd=$2
    local check_cmd=$3
    local check_path=$4
    local force=${5:-false}
    log_install "Installing $name."
    if [ "$force" = "true" ] || [ "$force" = "1" ]; then
        log_install "Forcing installation of $name."
        run_in_temp_dir "$name" "$install_cmd" || error_exit "Failed to install $name."
        log_install "$name installed successfully."
    elif [ -n "$check_path" ] && [ -x "$check_path" ]; then
        log_install "$name is already installed at $check_path."
    elif ! command -v $check_cmd &> /dev/null; then
        run_in_temp_dir "$name" "$install_cmd" || error_exit "Failed to install $name."
        log_install "$name installed successfully."
    else
        log_install "$name is already installed."
    fi
}

check_and_install_dependencies() {
    local dependencies=("$@")
    if command -v apt-get &> /dev/null; then
        PACKAGE_MANAGER="apt-get"
    elif command -v brew &> /dev/null; then
        PACKAGE_MANAGER="brew"
    else
        log_error "No supported package manager found. Please install required dependencies manually."
        exit 1
    fi

    check_sudo

    log_progress "Checking and installing missing dependencies..."
    for dep in "${dependencies[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            log_install "Installing $dep..."
            if [ "$PACKAGE_MANAGER" = "apt-get" ]; then
                $SUDO apt-get update && $SUDO apt-get install -y "$dep"
            elif [ "$PACKAGE_MANAGER" = "brew" ]; then
                brew install "$dep"
            fi
        else
            log_install "$dep is already installed."
        fi
    done
}

create_symlinks() {
    local items=("$@")
    for item in "${items[@]}"; do
        IFS=':' read -r source target <<<"$item"

        # Check if target exists (file, symlink, or directory) and remove it
        if [ -e "$target" ] || [ -L "$target" ]; then
            log_progress "Removing existing file/directory/symlink: $target"
            rm -rf "$target"
        fi

        # Create the new symlink
        ln -s "$DOTFILES_DIR/$source" "$target" || error_exit "Error creating symlink $target"
        log_success "Created symlink for $source -> $target"
    done
}

create_directories() {
    local directories=("$@")
    for dir in "${directories[@]}"; do
        mkdir -p "$dir" || error_exit "Error creating directory $dir"
    done
    log_success "Created required directories"
}
