#!/bin/bash
set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
source "$SCRIPT_DIR/logs"
source "$SCRIPT_DIR/utils"
source "$SCRIPT_DIR/checker"

# Parse optional argument
PACKAGE_MODE=install
if [ "$1" == "--targz" ]; then
    PACKAGE_MODE=targz
fi

check_and_install_dependencies curl tar git cmake ninja-build make

check_architecture
check_sudo

# Set variables
NVIM_REPO="https://github.com/neovim/neovim.git"
NVIM_DIR="$(pwd)/neovim"

# Clone or update neovim repo
if [ -d "$NVIM_DIR" ]; then
    echo "[BUILD_NVIM] Updating existing neovim repository."
    cd "$NVIM_DIR"
    git pull
else
    echo "[BUILD_NVIM] Cloning neovim repository."
    git clone "$NVIM_REPO" "$NVIM_DIR"
    cd "$NVIM_DIR"
fi

# Build neovim
echo "[BUILD_NVIM] Building neovim."
make CMAKE_BUILD_TYPE=Release

if [ "$PACKAGE_MODE" = "targz" ]; then
    echo "[BUILD_NVIM] Packaging neovim as tar.gz release."
    # Create staging directory for installation
    STAGING_DIR="$(pwd)/release_staging"
    rm -rf "$STAGING_DIR"
    mkdir -p "$STAGING_DIR"
    # Install to staging directory (files go under STAGING_DIR/usr/local)
    make install DESTDIR="$STAGING_DIR"
    # Create package directory with desired top-level folder structure
    PKG_DIR="$(pwd)/nvim-linux-arm64"
    rm -rf "$PKG_DIR"
    mkdir -p "$PKG_DIR"
    # Move installed files so that they appear under nvim-linux-arm64/
    mv "$STAGING_DIR/usr/local/"* "$PKG_DIR/"
    # Extract version from the built nvim binary
    NVIM_VERSION=$("$PKG_DIR/bin/nvim" --version | head -n 1 | awk '{print $2}')
    TAR_NAME="nvim_release_${NVIM_VERSION}.tar.gz"
    # Create tar.gz with top-level folder nvim-linux-arm64 and the version included
    tar -czvf "$TAR_NAME" -C "$(pwd)" "nvim-linux-arm64"
    echo "[BUILD_NVIM] Packaged neovim as ${TAR_NAME}."
else
    echo "[BUILD_NVIM] Installing neovim (may require sudo)."
    sudo make install
fi

echo "[BUILD_NVIM] Neovim process completed."
