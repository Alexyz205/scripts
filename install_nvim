#!/bin/bash
set -euo pipefail

# ===============================================
# Neovim Builder and Installer
# ===============================================
# Builds Neovim from source and installs it on the system.
# Can create distributable packages or install directly.
#
# Author: Alexis
# Version: 2.0
# Last Updated: 2025-08-07

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"

# Initialize error handling
if [ -f "$SCRIPT_DIR/error_handling" ]; then
    source "$SCRIPT_DIR/error_handling"
    init_error_handling "install_nvim"
else
    set -euo pipefail
fi

source "$SCRIPT_DIR/logs"
source "$SCRIPT_DIR/utils"
source "$SCRIPT_DIR/checker"

# Create a global temp directory for logs and other shared resources
INSTALL_TEMP_DIR=$(create_temp_dir "nvim_install")
LOG_FILE="$INSTALL_TEMP_DIR/install_nvim-$(date +%F).log"
exec > >(tee -a "$LOG_FILE") 2>&1

# Cleanup function to ensure temp directory is removed on exit
cleanup() {
    local exit_code=$?

    # Keep log file only if there was an error
    if [ $exit_code -eq 0 ]; then
        log "Installation completed successfully, cleaning up temporary files"
    else
        # Copy log to home directory for troubleshooting if there was an error
        local backup_log="$HOME/nvim_install_error-$(date +%F-%H%M%S).log"
        cp "$LOG_FILE" "$backup_log"
        log_warning "Installation encountered an error, log saved to $backup_log"
    fi

    # Clean up the temp directory
    cleanup_temp_dir "$INSTALL_TEMP_DIR"

    exit $exit_code
}

# Register cleanup function to run on script exit
trap cleanup EXIT

# ===============================================
# Command Line Processing
# ===============================================

# Parse optional argument
PACKAGE_MODE=install
if [ "${1:-}" == "--help" ]; then
    section_header "Neovim Build & Install"
    echo "Usage: install_nvim [--targz]"
    echo "This script builds Neovim from source and installs it on your system."
    echo
    echo "Options:"
    echo " ${INFO_ICON} --targz    - Create a distributable tar.gz package instead of installing"
    echo " ${INFO_ICON} --help     - Display this help message"
    exit 0
elif [ "${1:-}" == "--targz" ]; then
    PACKAGE_MODE=targz
    log "Running in packaging mode (--targz)"
fi

section_header "Neovim Build Environment"

# ===============================================
# Build Environment Setup
# ===============================================

# Check for dependencies
log_progress "Setting up build environment"
log_progress "Installing build dependencies"
if ! check_and_install_dependencies curl tar git cmake ninja-build make; then
    error_exit "Failed to install required build dependencies"
fi

log_progress "Validating system configuration"
check_architecture
check_sudo

log_success "Build environment ready"

# Set variables
NVIM_REPO="https://github.com/neovim/neovim.git"
NVIM_DIR="$INSTALL_TEMP_DIR/neovim"

# Clone or update neovim repo in our temporary directory
log_progress "Cloning Neovim repository to temporary directory"
git clone --depth 1 "$NVIM_REPO" "$NVIM_DIR"
cd "$NVIM_DIR"

# Build neovim
section_header "Building Neovim"

log_progress "Compiling Neovim (Release build)"
make CMAKE_BUILD_TYPE=Release

if [ "$PACKAGE_MODE" = "targz" ]; then
    section_header "Creating Distributable Package"

    log_progress "Creating packaging directory structure"
    # Create staging directory for installation
    STAGING_DIR="$NVIM_DIR/release_staging"
    mkdir -p "$STAGING_DIR"

    log_progress "Installing to staging directory..."
    # Install to staging directory (files go under STAGING_DIR/usr/local)
    make install DESTDIR="$STAGING_DIR"

    log_progress "Setting up package structure"
    # Create package directory with desired top-level folder structure
    PKG_DIR="$NVIM_DIR/nvim-linux-$ARCH"
    mkdir -p "$PKG_DIR"

    # Move installed files so that they appear under nvim-linux-arm64/
    mv "$STAGING_DIR/usr/local/"* "$PKG_DIR/"

    log_progress "Extracting version information"
    # Extract version from the built nvim binary
    NVIM_VERSION=$("$PKG_DIR/bin/nvim" --version | head -n 1 | awk '{print $2}')
    TAR_NAME="nvim_release_${NVIM_VERSION}_${ARCH}.tar.gz"
    TAR_PATH="$HOME/$TAR_NAME"

    log_progress "Creating tarball: $TAR_NAME"
    # Create tar.gz with top-level folder nvim-linux-arm64 and the version included
    tar -czvf "$TAR_PATH" -C "$NVIM_DIR" "nvim-linux-$ARCH"

    log_success "Packaged Neovim as ${TAR_NAME}"
    echo "${SUCCESS_ICON} Package created at: $TAR_PATH"
else
    section_header "Installing Neovim"

    log_progress "Installing Neovim system-wide (may require sudo)"
    $SUDO make install
    log_success "Neovim installed successfully"

    echo "${INFO_ICON} Verify installation with: ${BOLD}nvim --version${RESET}"
fi

section_header "Process Complete"
log_complete "Neovim build process completed successfully!"
